# Environment variables that the bot may use
NAME: English
LANGUAGE_CODE: en
TIMEZONE: UTC

# the back button on many menus
back: «

executed_cmd: Command executed

settings_text: |-
    🛠 <b>UserLixo settings</b>

language: |-
    🌎 Language
choose_language: |-
    🌎 Choose your language:
language_chosen: |-
    ✅ Language set!

sudoers: |-
    🛂 Sudoers

env_vars: |-
    ⚙ Config vars

help_text: |-
    ❔ <b>Help</b>

about_userlixo: |-
    ℹ️ About UserLixo

commands: |-
    📒 Commands

plugins: |-
    🖇 Plugins

chat: |-
    👥 Chat

channel: |-
    📢 Channel

setting_sudoers_text: |-
    🛂 <b>Sudoers</b>
    - The userbot sudoers are allowed to do... everything (even add and remove other sudoers).
    - Below are listed the actual sudoers of the userbot (also with you and the userbot itself). Through the inline keyboard you can remove (🗑) and add (➕) new sudoers.

add_sudoer: |-
    ➕ Add sudoer

add_sudoer_ask: |-
    💬 Send me the username or id of the user you want to add as sudoer.

add_sudoer_not_match: |-
    ❕ Your message contains characters not allowed for usernames and ids. Check if it's correct, send /add_sudoer and try again.

sudoer_added: |-
    ✅ Sudoer registered
settings_env_text: |-
    ⚙ <b>Config vars</b>

edit_env_text: |-
    📝 Config var "<code>{key}</code>"
    👁‍🗨 Value: "<code>{value}</code>"
    
    To edit it, send the new value in this chat.
about_userlixo_text: |-
    🚮 UserLixo is a userbot made for fun by @AmanoTeam u.u

    ⚙ This is the branch <code>userlixo-czp</code>, which is still under development. It might contain bugs, so please report them to @usernein.
edit_env_text_restart: |-
    📝 Config var "<code>{key}</code>"
    👁‍🗨 Value: "<code>{value}</code>"
    
    ❗️ <b>This config var requires UserLixo to restart after edited.</b>

restart_now: |-
    🔄 Restart now

restarting_now_alert: |-
    🔄 UserLixo is being restarted... It should take 3-7 seconds. If it takes longer, check the terminal output.

upgrading_now_alert: |-
    🔄 UserLixo is being upgraded... It should take 3-7 seconds. If it takes longer, check the terminal output.

restarted_alert: |-
    ✅ UserLixo restarted within <code>{seconds}</code>s.
    
    🏷 <b>Version:</b> <code>{local_version}</code>
    🔧 <b>Commit</b>: <code>{title}</code> (<code>{rev}</code>)

upgraded_alert: |-
    🆕 UserLixo upgraded within <code>{seconds}</code>s.
    
    🏷 <b>Version:</b> <code>{local_version}</code>
    🔧 <b>Commit</b>: <code>{title}</code> (<code>{rev}</code>)

upgrade_error_not_git: |-
    😕 To upgrade you must be running UserLixo under a git repository.
    Clone the repo with <code>git clone https://github.com/AmanoTeam/UserLixo -b userlixo-czp</code> and re-login.

upgrade_alert_already_uptodate: |-
    ☑️ UserLixo is already up-to-date.
    
    🏷 <b>Version:</b> <code>{local_version}</code>
    🔧 <b>Commit</b>: <code>{title}</code> (<code>{rev}</code>)

upgrade_failed: |-
    ❌ The upgrade failed with return code <code>{code}</code> for the branch <code>{branch}</code>.
    <code>{output}</code>
upgrade: |-
    ⏬ Upgrade

restart: |-
    🔄 Restart

help: |-
    ❔ Help

settings: |-
    ⚙ Settings

start_text: |-
    👾 Hey! I am your personal assistant bot for UserLixo. What are you looking for?
commands_text: |-
    📒 Commands list

command_info: |-
    📒 Command <code>{command}</code>
    {info}


cmd_info_upgrade: |-
    Upgrade to the lastest commit of userlixo-czp on GitHub and restart.

cmd_info_restart: |-
    Restart the process, loading all changes.

cmd_info_eval: |-
    Evaluates a Python expression and edit the message with the result. It has an alias 'ev' that replies instead of editing.
    
    Available variables:
    <code>c</code> - Client object
    <code>m</code> - Message object
    <code>reply</code> - the replied Message object or None
    <code>user</code> - if the message is a reply, the replied User. If not, the sender's User.
    <code>chat</code> - shortcut to <code>m.chat</code>

cmd_info_exec: |-
    Executes a Python code and edit the message with the output. It has an alias 'ex' that replies instead of editing.
    
    Available variables:
    <code>c</code> - Client object
    <code>m</code> - Message object
    <code>reply</code> - the replied Message object or None
    <code>user</code> - if the message is a reply, the replied User. If not, the sender's User.
    <code>chat</code> - shortcut to <code>m.chat</code>

cmd_info_cmd: |-
    Executes a shell command IN THE SERVER. Things done here are real and cannot be undone by UserLixo.

cmd_info_ping: |-
    Don't we all know what it does? It sends a "Pong" informing how much time (in ms) a request to the API took.

cmd_info_help: |-
    Show some buttons with infos that may help you.

cmd_info_settings: |-
    Show the settings. Some configurations can only be done in the assistant bot's PM.

checking_packages_updates: |-
    🔍 Looking for upgradable Python packages...

upgrade_pip_continue: |-
    📦 Upgrade packages and continue

upgrade_not_pip: |-
    ➡️ Continue without upgrading packages

cancel: |-
    ✖️ Cancel

ask_upgrade_pip_pkgs: |-
    📦 Some of the required packages are upgradable:
    {upgradable}
    
    What do you want to do?

upgrading_pip_packages: |-
    📦 Upgrading requirements...

upgrade_canceled: |-
    ✖️ Upgrade canceled.
plugins_text: |-
    🖇 <b>List of plugins</b>
    Plugins are add-ons for UserLixo that add new features and change usual UserLixo's behavior.

plugin_info: |-
    🖇 <b>Plugin</b> <code>{info[title]}</code>
    ℹ️ {info[description]}{status_line}
    
    👤 <b>Author:</b> {info[author]}{channel_line}{github_line}{contributors_line}{requirements_line}

plugin_channel_line: |-
    📢 <b>Channel:</b> {channel}
plugin_github_line: |-
    🔃 <b>GitHub:</b> {github}
plugin_requirements_line: |-
    📦 <b>Requirements:</b> {requirements}
plugin_contributors_line: |-
    👥 <b>Contributors:</b> {contributors}

add_plugin: |-
    ➕ Add plugin

info_text: |-
    ℹ️ <b>UserLixo v{local_version} ({ul_status})</b>
    💻 <code>{uname}</code>
    
    📈 UserLixo's uptime: <code>{uptime}</code>

info_upgradable_to: |-
    upgradable to {version}

info_lastest: |-
    lastest

plugin_file_ask: |-
    🖇 Send a UserLixo plugin (a python file) to add.

plugin_waiting_file: |-
    ❕ I'm waiting for a <b>file</b> (an UserLixo plugin) to add. I can't add anything else as plugin. Use /cancel to cancel.

plugin_format_not_accepted: |-
    ❕ Plugins can be only python scripts, ending with the extension '.py'.

plugin_too_big: |-
    ❕ This file is too large for a plugin (>5MB), i refuse to download it.

plugin_info_block_not_found: |-
    ❕ This is a python script that follow all requirements, but i could not find the <b>required comment block</b> with the plugin info, so this may not be an UserLixo plugin or its author made a mistake.

plugin_could_not_load: |-
    ❕ Everything is ok with the plugin, but for some reason i <b>couldn't import</b> it to load at runtime. The file has been deleted from the server. Error:
    <code>{e}</code>

plugin_has_no_handlers: |-
    ⚠️ Hmmm, i recognized the plugin and added it, but it <b>hasn't any handlers</b>! This is suspicious, i deleted the file (but it ran once). Please check this plugin and any other you may want to add in the future.

see_plugin_info: |-
    ℹ️ See plugin info

plugin_added: |-
    ✅ Plugin <code>{name}</code> successfully added.
command_canceled: |-
    Command canceled.

add: |-
    ➕ Add

remove: |-
    🗑 Remove

deactivate: |-
    🔴 Deactivate

activate: |-
    🟢 Activate

active: |-
    ❇️ Active

inactive: |-
    💤 Inactive

plugin_not_exists_on_server: |-
    ❕ This plugin does not exist on the server anymore, it was deleted or renamed.

plugin_has_been_deactivated: |-
    🔴 The plugin has been deactivated!

plugin_has_been_activated: |-
    🟢 The plugin has been activated!

plugin_removed: |-
    🗑 The plugin {name} has been removed!